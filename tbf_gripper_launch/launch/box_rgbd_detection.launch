<?xml version="1.0" encoding="utf-8"?>
<!--
	author: sgrehl
	proj: MiningRoX
	date: 12.08.2015
	desc: Detecting a wlan_box, tracked by a rgb-d camera (e.g. Xtion)
-->
<launch>
    <arg name="camera_id" default="73"/>
    <arg name="camera_rate" default="2"/>
    <arg name="marker_size" default="4.475"/>
    <arg name="max_new_marker_error" default="0.05"/>
    <arg name="max_track_error" default="0.1"/>
    <arg name="gain" default="1"/>
    <arg name="use_gui" default="false"/>

    <arg name="cam" default="camera"/>
    <arg name="cam_image_topic" default="$(arg cam)/depth_registered/points"/>
    <!--<arg name="cam_image_topic" default="$(arg cam)/depth_registered/image_raw"/>-->
    <arg name="cam_info_topic" default="$(arg cam)/rgb/camera_info"/>
    <arg name="output_frame" default="/camera_link"/>
    <arg name="start_description" default="true" />
    <arg name="camera_running" default="true" />

    <!--run camera-->
    <include file="$(find openni2_launch)/launch/openni2.launch" unless="$(arg camera_running)">
        <arg name="camera" default="$(arg cam)"/>
        <arg name="rgb_frame_id" default="$(arg cam)_rgb_optical_frame"/>
        <arg name="depth_frame_id" default="$(arg cam)_depth_optical_frame"/>
        <arg name="publish_tf" value="false"/>
    </include>

    <!--calibration the camera-->
    <node name="xtion_imageproc" pkg="image_proc" type="image_proc" ns="$(arg cam)"/>

    <!-- start tracking of the object-->
    <node name="find_object_3d" pkg="find_object_2d" type="find_object_2d" output="screen">
		<param name="gui" value="true" type="bool"/>
		<param name="settings_path" value="~/.ros/find_object_2d.ini" type="str"/>
		<param name="subscribe_depth" value="true" type="bool"/>
		<param name="objects_path" value="" type="str"/>
		<param name="object_prefix" value="object" type="str"/>

		<remap from="rgb/image_rect_color" to="$(arg cam)/rgb/image_rect_color"/>
		<remap from="depth_registered/image_raw" to="$(arg cam)/depth_registered/image_raw"/>
		<remap from="depth_registered/camera_info" to="$(arg cam)/depth_registered/camera_info"/>
	</node>

	<!-- Example of tf synchronisation with the objectsStamped message -->
	<node name="tf_example" pkg="find_object_2d" type="tf_example" output="screen">
		<param name="map_frame_id" value="/map" type="string"/>
		<param name="object_prefix" value="object" type="str"/>
	</node>
	<!-- fake some tf frames for the example /map -> /odom -> /base_link -> /camera_link -->
	<node pkg="tf" type="static_transform_publisher" name="base_to_camera_tf"
		args="0.1 0.0 0.3 0.0 0.0 0.0 /base_link /camera_link 100" />
	<node pkg="tf" type="static_transform_publisher" name="odom_to_base_tf"
		args="1.0 0.0 0.1 1.5707 0.0 0.0 /odom /base_link 100" />
	<node pkg="tf" type="static_transform_publisher" name="map_to_odom_tf"
		args="0.0 0.5 0.0 0.7853 0.0 0.0 /map /odom 100" />

    <!-- launch the description of the wlan_box as robot_description-->
    <group if="$(arg start_description)" ns="wlan_box">
        <param name="robot_description" command="$(find xacro)/xacro.py '$(find tubaf_robot_description)/urdf/gripper/tubaf_wlan_box.urdf.xacro'"/>
        <node name="rsp_box" pkg="robot_state_publisher" type="state_publisher"/>
    </group>

    <!-- start visualisation if wanted-->
    <group if="$(arg use_gui)">
        <node name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false"/>
    </group>

</launch>

